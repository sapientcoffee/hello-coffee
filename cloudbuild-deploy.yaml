steps:
- name: 'python'
  id: Setup Python environment
  entrypoint: 'python'
  args: ['-m', 'pip', 'install', '--upgrade', 'pip']

- name: python
  id: Install dependencies
  entrypoint: python
  args: ['-m', 'pip', 'install', 'build', 'pytest', 'Flask', '--user']

- name: 'python'
  id: Unit Test
  entrypoint: 'python'
  args: ['-m', 'pytest', '--junitxml=${SHORT_SHA}_test_log.xml']

# Create Container Image
- name: gcr.io/cloud-builders/docker
  id: Build Container Image
  args:
    - build
    - '-t'
    - '$_AR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME/$_IMAGE:$COMMIT_SHA'
    - .

# Push Container Image to Artifact Registry
- name: gcr.io/cloud-builders/docker
  id: Push Container Image
  args:
    - push
    - '$_AR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME/$_IMAGE:$COMMIT_SHA'

# Get Image SHA from Artifact Registry
## Different format to `gcloud` builder example
- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  id: "Get Image Digest"
  entrypoint: /bin/bash
  args: 
    - -c
    - |
      gcloud artifacts docker images describe \
      $_AR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME/$_IMAGE:$COMMIT_SHA \
      --format 'value(image_summary.digest)' > /workspace/image-sha.txt

# Genereate SBOM
- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  id: Create a Software Bill of Materials (SBOM)
  allowFailure: true
  entrypoint: /bin/bash
  args:
    - -c
    - |
      gcloud artifacts sbom export --uri ${_AR_HOSTNAME}/${PROJECT_ID}/${_SERVICE_NAME}/${_IMAGE}@$(cat /workspace/image-sha.txt)
    # - '$_AR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME/$_IMAGE'

# BinAUth Attestation
- id: 'create-attestation'
  name: 'gcr.io/${PROJECT_ID}/binauthz-attestation:latest'
  entrypoint: /bin/bash
  allowFailure: true
  args:
    - -c
    - '--artifact-url'
    - 'gcr.io/${PROJECT_ID}/helloworld:latest'
    - '--attestor'
    - 'projects/${PROJECT_ID}/attestors/ATTESTOR_NAME'
    - '--keyversion'
    - 'projects/${PROJECT_ID}/locations/KMS_KEY_LOCATION/keyRings/KMS_KEYRING_NAME/cryptoKeys/KMS_KEY_NAME/cryptoKeyVersions/KMS_KEY_VERSION'


- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  id: Create a Cloud Deploy Candidate
  entrypoint: /bin/bash
  args:
    - -c
    - |
      gcloud deploy releases create coffee-${SHORT_SHA} --region ${_DEPLOY_REGION} --delivery-pipeline ${_DEPLOY_PIPELINE} \
      --annotations commitID=${REVISION_ID} \
      --images app=${_AR_HOSTNAME}/${PROJECT_ID}/${_SERVICE_NAME}/${_IMAGE}@$(cat /workspace/image-sha.txt)

# Example task schema
  # - name: string
  #   args: [string, string, ...]
  #   env: [string, string, ...]
  #   allowFailure: boolean
  #   allowExitCodes: [string (int64 format), string (int64 format), ...]
  #   dir: string
  #   id: string
  #   waitFor: [string, string, ...]
  #   entrypoint: string
  #   secretEnv: string
  #   volumes: object(Volume)
  #   timeout: string (Duration format)
  #   script: string
  

images:
- '$_AR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME/$_IMAGE:$COMMIT_SHA'
# timeout: string (Duration format)
# queueTtl: string (Duration format)
# logsBucket: string

options:
  logging: CLOUD_LOGGING_ONLY
  requestedVerifyOption: VERIFIED
  dynamicSubstitutions: true
#  env: [string, string, ...]
#  secretEnv: string
#  volumes: object(Volume)
#  sourceProvenanceHash: enum(HashType)
#  machineType: enum(MachineType)
#  diskSizeGb: string (int64 format)
#  substitutionOption: enum(SubstitutionOption)
#  logStreamingOption: enum(LogStreamingOption)
#  defaultLogsBucketBehavior: enum(DefaultLogsBucketBehavior)
#  pool: object(PoolOption)
# substitutions: map (key: string, value: string)
# tags: [string, string, ...]
# serviceAccount: string
# secrets: object(Secret)
# availableSecrets: object(Secrets)

# artifacts:
#   pythonPackages:
#   - repository: 'https://europe-python.pkg.dev/$PROJECT_ID/hello-coffee-python'
#     paths: ['dist/*']

#   mavenArtifacts: [object(MavenArtifact), ...]
#   npmPackages: [object(npmPackage), ...]
# https://cloud.google.com/build/docs/build-config-file-schema for full details